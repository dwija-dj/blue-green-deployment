pipeline {
    agent any

    environment {
        // Define credentials object for use with withCredentials
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKER_IMAGE = 'dwija18/myapp'
        IMAGE_TAG = "${BUILD_NUMBER}"
        KUBE_NAMESPACE = 'blue-green'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image: ${DOCKER_IMAGE}:${IMAGE_TAG}"
                    sh """
                        # The 'application' folder contains the Dockerfile.
                        # We change directory to the application folder to ensure the build context is correct.
                        # Based on your file structure, the Dockerfile is in the root, so we change directory back to the workspace root:
                        cd ..
                        docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} .
                        docker tag ${DOCKER_IMAGE}:${IMAGE_TAG} ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                // Correct way to securely handle credentials in Declarative Pipeline
                withCredentials([env.DOCKERHUB_CREDENTIALS]) {
                    sh """
                        # Use the injected environment variables
                        echo "${DOCKERHUB_CREDENTIALS_PSW}" | docker login -u "${DOCKERHUB_CREDENTIALS_USR}" --password-stdin
                        docker push ${DOCKER_IMAGE}:${IMAGE_TAG}
                        docker push ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }

        stage('Check Current Active Environment') {
            steps {
                script {
                    // Check the current color selector in the service
                    def currentColor = sh(
                        script: "kubectl get service myapp-service -n ${KUBE_NAMESPACE} -o jsonpath='{.spec.selector.color}'",
                        returnStdout: true,
                        // Allow the command to fail gracefully (e.g., if service is new/empty)
                        // This uses a default color of 'blue' if the command fails to find the selector
                        returnStatus: true
                    )
                    
                    // If the command succeeded, use the output; otherwise, assume 'blue' is current.
                    // This logic is safer in a Groovy script block.
                    def selectorOutput = sh(
                        script: "kubectl get service myapp-service -n ${KUBE_NAMESPACE} -o jsonpath='{.spec.selector.color}' || echo 'blue'",
                        returnStdout: true
                    ).trim()
                    
                    env.CURRENT_COLOR = selectorOutput
                    env.TARGET_COLOR = (env.CURRENT_COLOR == 'blue') ? 'green' : 'blue'

                    echo "Current active environment: ${CURRENT_COLOR}"
                    echo "Deploying to: ${TARGET_COLOR}"
                }
            }
        }

        stage('Deploy to Inactive Environment') {
            steps {
                script {
                    echo "Deploying to ${TARGET_COLOR} environment..."
                    sh """
                        kubectl set image deployment/myapp-${TARGET_COLOR} \
                            myapp=${DOCKER_IMAGE}:${IMAGE_TAG} \
                            -n ${KUBE_NAMESPACE} --record

                        kubectl rollout status deployment/myapp-${TARGET_COLOR} -n ${KUBE_NAMESPACE}
                    """
                }
            }
        }

        stage('Run Smoke Tests') {
            steps {
                script {
                    echo "Running smoke tests on ${TARGET_COLOR} environment..."
                    sleep 10 
                    
                    def podName = sh(
                        script: "kubectl get pods -n ${KUBE_NAMESPACE} -l color=${TARGET_COLOR} -o jsonpath='{.items[0].metadata.name}'",
                        returnStdout: true
                    ).trim()
                    
                    sh """
                        # Test Health and Root Endpoints inside the new pod
                        kubectl exec ${podName} -n ${KUBE_NAMESPACE} -- curl -f http://localhost:3000/health || exit 1
                        kubectl exec ${podName} -n ${KUBE_NAMESPACE} -- curl -f http://localhost:3000/ || exit 1
                    """
                    
                    echo "✓ Smoke tests passed!"
                }
            }
        }

        stage('Switch Traffic') {
            steps {
                // Manual approval gate
                input message: "Switch traffic to ${TARGET_COLOR} environment?", ok: 'Deploy to Production'
                script {
                    echo "Switching traffic to ${TARGET_COLOR}..."
                    sh """
                        kubectl patch service myapp-service -n ${KUBE_NAMESPACE} \
                            -p '{"spec":{"selector":{"color":"${TARGET_COLOR}"}}}'
                    """
                    echo "✓ Traffic switched to ${TARGET_COLOR}!"
                }
            }
        }

        stage('Update Previous Environment') {
            steps {
                script {
                    echo "Updating ${CURRENT_COLOR} environment with new version..."
                    sh """
                        kubectl set image deployment/myapp-${CURRENT_COLOR} \
                            myapp=${DOCKER_IMAGE}:${IMAGE_TAG} \
                            -n ${KUBE_NAMESPACE} --record

                        kubectl rollout status deployment/myapp-${CURRENT_COLOR} -n ${KUBE_NAMESPACE}
                    """
                }
            }
        }
    }

    post {
        success {
            echo '✓ Blue-Green Deployment Successful!'
            echo "Active environment: ${env.TARGET_COLOR}"
            echo "Version: ${env.IMAGE_TAG}"
        }
        failure {
            echo '✗ Deployment Failed! Attempting rollback...'
            // CRITICAL FIX: Wrapped sh step in a script block
            script {
                sh """
                    kubectl patch service myapp-service -n ${KUBE_NAMESPACE} \
                        -p '{"spec":{"selector":{"color":"${env.CURRENT_COLOR}"}}}'
                    echo "Service rolled back to ${env.CURRENT_COLOR}"
                """
            }
        }
        always {
            // CRITICAL FIX: Wrapped sh step in a script block
            script {
                sh 'docker logout'
            }
        }
    }
}