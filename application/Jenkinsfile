pipeline {
    agent any

    environment {
        DOCKERHUB_USER = 'dwijavanthi'                // your Docker Hub username
        DOCKERHUB_PSW  = credentials('dockerhub-credentials')
        K8S_TOKEN      = credentials('k8s-token') // Jenkins credential ID for Docker Hub password
        IMAGE_NAME     = "dwijavanthi/myapp"
        IMAGE_TAG      = "latest"
        K8S_NAMESPACE  = "blue-green"
        K8S_SERVICE    = "myapp-service"
        K8S_COLOR_ACTIVE = "blue"
        K8S_COLOR_INACTIVE = "green"

    }

    stages {

        stage('Checkout SCM') {
            steps {
                checkout scm
                script {
                    // Get current commit hash
                    def commit = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    echo "Checked out commit: ${commit}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ./application
                        docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
                    """
                    echo "Docker image built: ${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    sh """
                        echo ${DOCKERHUB_PSW} | docker login -u ${DOCKERHUB_USER} --password-stdin
                        docker push ${IMAGE_NAME}:${IMAGE_TAG}
                        docker push ${IMAGE_NAME}:latest
                        docker logout
                    """
                }
            }
        }

        stage('Check Current Active Environment') {
            steps {
                script {
                    // Determine current active color
                    env.CURRENT_COLOR = sh(
                        script: "kubectl get service ${K8S_SERVICE} -n ${K8S_NAMESPACE} -o jsonpath='{.spec.selector.color}'",
                        returnStdout: true
                    ).trim()

                    env.NEXT_COLOR = (env.CURRENT_COLOR == K8S_COLOR_ACTIVE) ? K8S_COLOR_INACTIVE : K8S_COLOR_ACTIVE
                    echo "Current active color: ${env.CURRENT_COLOR}, Deploying to: ${env.NEXT_COLOR}"
                }
            }
        }

        stage('Deploy to Inactive Environment') {
            steps {
                script {
                    sh """
                        kubectl apply -f ./k8s/deployment-${env.NEXT_COLOR}.yaml -n ${K8S_NAMESPACE}
                        kubectl rollout status deployment/myapp-${env.NEXT_COLOR} -n ${K8S_NAMESPACE}
                    """
                }
            }
        }

        stage('Run Smoke Tests') {
            steps {
                script {
                    // Optional: add actual smoke test commands
                    echo "Running smoke tests on ${env.NEXT_COLOR} environment..."
                }
            }
        }

        stage('Switch Traffic') {
            steps {
                script {
                    sh """
                        kubectl patch service ${K8S_SERVICE} -n ${K8S_NAMESPACE} \
                        -p '{"spec":{"selector":{"color":"${env.NEXT_COLOR}"}}}'
                    """
                    echo "Traffic switched to ${env.NEXT_COLOR} environment"
                }
            }
        }

        stage('Update Previous Environment') {
            steps {
                script {
                    sh """
                        kubectl set image deployment/myapp-${env.CURRENT_COLOR} myapp=${IMAGE_NAME}:${IMAGE_TAG} -n ${K8S_NAMESPACE} || true
                        echo "Previous environment (${env.CURRENT_COLOR}) updated."
                    """
                }
            }
        }
    }

    post {
        success {
            echo '✅ Deployment Successful!'
        }
        failure {
            echo '❌ Deployment Failed! Attempting rollback...'
            script {
                if (env.CURRENT_COLOR) {
                    sh """
                        kubectl patch service ${K8S_SERVICE} -n ${K8S_NAMESPACE} \
                        -p '{"spec":{"selector":{"color":"${env.CURRENT_COLOR}"}}}'
                    """
                    echo "Rolled back traffic to ${env.CURRENT_COLOR}"
                }
            }
        }
    }
}
