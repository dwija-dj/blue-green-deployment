pipeline {
    agent any

    environment {
        DOCKERHUB_USER = 'dwija18'                 // Docker Hub username
        DOCKERHUB_PSW  = credentials('dockerhub') // Docker Hub password stored in Jenkins
        K8S_TOKEN      = credentials('k8s-token') // Kubernetes token stored in Jenkins
        IMAGE_NAME     = 'dwija18/myapp'
        IMAGE_TAG      = "11"                       // increment as needed
        NAMESPACE      = 'blue-green'
        SERVICE_NAME   = 'myapp-service'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
                script {
                    sh 'git rev-parse --short HEAD > commit.txt'
                    echo "Checked out commit: $(cat commit.txt)"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image: ${IMAGE_NAME}:${IMAGE_TAG}"
                    sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ./application"
                    sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest"
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([string(credentialsId: 'dockerhub', variable: 'DOCKERHUB_PSW')]) {
                    sh """
                        echo $DOCKERHUB_PSW | docker login -u $DOCKERHUB_USER --password-stdin
                        docker push ${IMAGE_NAME}:${IMAGE_TAG}
                        docker push ${IMAGE_NAME}:latest
                        docker logout
                    """
                }
            }
        }

        stage('Deploy to Inactive Environment') {
            steps {
                withCredentials([string(credentialsId: 'k8s-token', variable: 'K8S_TOKEN')]) {
                    sh """
                        export KUBECONFIG=/tmp/kubeconfig
                        kubectl --token=$K8S_TOKEN -n $NAMESPACE set image deployment/myapp-inactive myapp=${IMAGE_NAME}:${IMAGE_TAG}
                        kubectl --token=$K8S_TOKEN -n $NAMESPACE rollout status deployment/myapp-inactive
                    """
                }
            }
        }

        stage('Switch Traffic') {
            steps {
                withCredentials([string(credentialsId: 'k8s-token', variable: 'K8S_TOKEN')]) {
                    sh """
                        export KUBECONFIG=/tmp/kubeconfig
                        # Switch service selector to new color
                        kubectl --token=$K8S_TOKEN -n $NAMESPACE patch service $SERVICE_NAME -p '{"spec":{"selector":{"color":"green"}}}'
                    """
                }
            }
        }

        stage('Run Smoke Tests') {
            steps {
                echo "Add smoke test commands here..."
            }
        }
    }

    post {
        failure {
            script {
                withCredentials([string(credentialsId: 'k8s-token', variable: 'K8S_TOKEN')]) {
                    sh """
                        export KUBECONFIG=/tmp/kubeconfig
                        echo "Deployment failed! Rolling back..."
                        # Rollback service selector
                        kubectl --token=$K8S_TOKEN -n $NAMESPACE patch service $SERVICE_NAME -p '{"spec":{"selector":{"color":"null"}}}'
                    """
                }
            }
        }
    }
}
