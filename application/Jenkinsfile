pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'dwija18/myapp'
        IMAGE_TAG = "${BUILD_NUMBER}"
        KUBE_NAMESPACE = 'blue-green'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                    echo "Checked out commit: ${env.GIT_COMMIT_SHORT}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image: ${DOCKER_IMAGE}:${IMAGE_TAG}"
                    sh """
                        docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} ./application
                        docker tag ${DOCKER_IMAGE}:${IMAGE_TAG} ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials',
                                                 usernameVariable: 'DOCKERHUB_USR',
                                                 passwordVariable: 'DOCKERHUB_PSW')]) {
                    sh """
                        echo "$DOCKERHUB_PSW" | docker login -u "$DOCKERHUB_USR" --password-stdin
                        docker push ${DOCKER_IMAGE}:${IMAGE_TAG}
                        docker push ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }

        stage('Check Current Active Environment') {
            steps {
                script {
                    def selectorOutput
                    try {
                        selectorOutput = sh(
                            script: "kubectl get service myapp-service -n ${KUBE_NAMESPACE} -o jsonpath='{.spec.selector.color}'",
                            returnStdout: true
                        ).trim()
                    } catch (e) {
                        selectorOutput = 'blue'
                    }

                    env.CURRENT_COLOR = selectorOutput
                    env.TARGET_COLOR = (env.CURRENT_COLOR == 'blue') ? 'green' : 'blue'

                    echo "Current active environment: ${env.CURRENT_COLOR}"
                    echo "Deploying to: ${env.TARGET_COLOR}"
                }
            }
        }

        stage('Deploy to Inactive Environment') {
            steps {
                script {
                    echo "Deploying to ${env.TARGET_COLOR} environment..."
                    sh """
                        kubectl set image deployment/myapp-${env.TARGET_COLOR} \
                            myapp=${DOCKER_IMAGE}:${IMAGE_TAG} \
                            -n ${KUBE_NAMESPACE} --record

                        kubectl rollout status deployment/myapp-${env.TARGET_COLOR} -n ${KUBE_NAMESPACE}
                    """
                }
            }
        }

        stage('Run Smoke Tests') {
            steps {
                script {
                    echo "Running smoke tests on ${env.TARGET_COLOR} environment..."
                    sleep 10

                    def podName = sh(
                        script: "kubectl get pods -n ${KUBE_NAMESPACE} -l color=${env.TARGET_COLOR} -o jsonpath='{.items[0].metadata.name}'",
                        returnStdout: true
                    ).trim()

                    sh """
                        kubectl exec ${podName} -n ${KUBE_NAMESPACE} -- curl -f http://localhost:3000/health || exit 1
                        kubectl exec ${podName} -n ${KUBE_NAMESPACE} -- curl -f http://localhost:3000/ || exit 1
                    """

                    echo "✓ Smoke tests passed!"
                }
            }
        }

        stage('Switch Traffic') {
            steps {
                input message: "Switch traffic to ${env.TARGET_COLOR} environment?", ok: 'Deploy to Production'
                script {
                    echo "Switching traffic to ${env.TARGET_COLOR}..."
                    sh """
                        kubectl patch service myapp-service -n ${KUBE_NAMESPACE} \
                            -p '{"spec":{"selector":{"color":"${env.TARGET_COLOR}"}}}'
                    """
                    echo "✓ Traffic switched to ${env.TARGET_COLOR}!"
                }
            }
        }

        stage('Update Previous Environment') {
            steps {
                script {
                    echo "Updating ${env.CURRENT_COLOR} environment with new version..."
                    sh """
                        kubectl set image deployment/myapp-${env.CURRENT_COLOR} \
                            myapp=${DOCKER_IMAGE}:${IMAGE_TAG} \
                            -n ${KUBE_NAMESPACE} --record

                        kubectl rollout status deployment/myapp-${env.CURRENT_COLOR} -n ${KUBE_NAMESPACE}
                    """
                }
            }
        }
    }

    post {
        success {
            echo '✓ Blue-Green Deployment Successful!'
            echo "Active environment: ${env.TARGET_COLOR}"
            echo "Version: ${env.IMAGE_TAG}"
        }

        failure {
            echo '✗ Deployment Failed! Attempting rollback...'
            script {
                sh """
                    kubectl patch service myapp-service -n ${KUBE_NAMESPACE} \
                        -p '{"spec":{"selector":{"color":"${env.CURRENT_COLOR}"}}}'
                    echo "Service rolled back to ${env.CURRENT_COLOR}"
                """
            }
        }

        always {
            script {
                // Properly logout from Docker
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials',
                                                 usernameVariable: 'DOCKERHUB_USR',
                                                 passwordVariable: 'DOCKERHUB_PSW')]) {
                    sh 'docker logout'
                }
            }
        }
    }
}
