pipeline {
    agent any

    environment {
        APP_NAME = "myapp"
        DOCKER_USER = "dwijavanthi"
        IMAGE_TAG = "${DOCKER_USER}/${APP_NAME}:latest"
        KUBE_NAMESPACE = "blue-green"
    }

    stages {

        stage('Checkout SCM') {
            steps {
                checkout scm
                script {
                    def commit = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    echo "Checked out commit: ${commit}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${IMAGE_TAG} ./application"
                    sh "docker tag ${IMAGE_TAG} ${IMAGE_TAG}"
                    echo "Docker image built: ${IMAGE_TAG}"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([string(credentialsId: 'dockerhub-credentials', variable: 'DOCKERHUB_PSW')]) {
                    script {
                        sh """
                        echo \$DOCKERHUB_PSW | docker login -u ${DOCKER_USER} --password-stdin
                        docker push ${IMAGE_TAG}
                        """
                        echo "Docker image pushed: ${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Check Current Active Environment') {
            steps {
                script {
                    echo "Checking current active environment in namespace ${KUBE_NAMESPACE}..."
                    // Example: get current active service
                    sh "kubectl get svc -n ${KUBE_NAMESPACE}"
                }
            }
        }

        stage('Deploy to Inactive Environment') {
            steps {
                script {
                    echo "Deploying ${IMAGE_TAG} to inactive environment..."
                    sh """
                    # Example deployment yaml using kubectl
                    kubectl set image deployment/${APP_NAME}-green ${APP_NAME}=${IMAGE_TAG} -n ${KUBE_NAMESPACE}
                    """
                }
            }
        }

        stage('Run Smoke Tests') {
            steps {
                script {
                    echo "Running smoke tests..."
                    // Add real smoke test commands here
                    sh "echo 'Smoke test successful!'"
                }
            }
        }

        stage('Switch Traffic') {
            steps {
                script {
                    echo "Switching traffic to new environment..."
                    // Example: switch service to green
                    sh """
                    kubectl patch svc ${APP_NAME}-svc -n ${KUBE_NAMESPACE} -p '{"spec":{"selector":{"env":"green"}}}'
                    """
                }
            }
        }

        stage('Update Previous Environment') {
            steps {
                script {
                    echo "Updating previous environment (optional)..."
                    // Example: update blue deployment
                    sh "kubectl rollout restart deployment/${APP_NAME}-blue -n ${KUBE_NAMESPACE}"
                }
            }
        }
    }

    post {
        success {
            echo "✅ Deployment Successful!"
        }
        failure {
            echo "❌ Deployment Failed! Attempting rollback..."
            script {
                // Rollback example: switch back traffic to old environment
                sh "kubectl patch svc ${APP_NAME}-svc -n ${KUBE_NAMESPACE} -p '{\"spec\":{\"selector\":{\"env\":\"blue\"}}}'"
            }
        }
    }
}
